---
title: Replicate `superpc` results
author: Edoardo Costantini
date: '2022-10-26'
format:
  html:
    toc: true
    toc-location: left
    number-sections: true
    mainfont: sans-serif
    fontsize: 1.1em
    linestretch: 1.5
execute:
  warning: false
  keep-md: false
  keep-ipynb: false
---

```{r, include = FALSE}
# knitr::opts_chunk$set(
#   collapse = TRUE,
#   comment = "#>"
# )
```

# Preliminaries

Load the required packages.

```{r setup}
library(patchwork) # For combining ggplots
library(superpc)
devtools::load_all()
# library(gspcr)

```

Prepare data

```{r}
# Comment goal of code
X <- GSPCRexdata$X
y <- GSPCRexdata$y$cont

```

# Estimation

Run the version `gspcr`:

```{r }
# Train the GSPCR model
out <- cv_gspcr(
  dv = y,
  ivs = X,
  fam = "gaussian",
  nthrs = 20,
  maxnpcs = 5,
  K = 10,
  fit_measure = "F",
  thrs = "normalized",
  min_features = 1,
  max_features = ncol(X),
  oneSE = TRUE
)

# Use the plotting function
plot_output <- plot(
  x = out,
  y = "F",
  labels = TRUE,
  errorBars = TRUE,
  discretize = FALSE
)

# And plot
plot_output

```

## Compare results with `superpc`

Run `superpc` version

```{r }
# Define a train data
data.train <- list(
  x = t(as.matrix(X)),
  y = y,
  featurenames = colnames(X)
)

# Train the model (computes the scores for each feature)
train.obj <- superpc.train(
  data = data.train,
  type = "regression"
)

# Cross-validate the model
cv.obj <- superpc.cv(
  fit = train.obj,
  data = data.train,
  min.features = 1,
  max.features = nrow(data.train$x),
  n.fold = 10,
  n.threshold = 20,
  n.components = 5
)

# Create plot the cross-validation curves
cv.obj_plot <- superpc.plotcv(cv.obj)

```

The computed thresholds are the same:

```{r}
# Report the threshold values
data.frame(
    superpc = cv.obj$thresholds,
    gpscr = out$thr,
    diff = cv.obj$thresholds - out$thr
)

```

# Different bivariate association measures

We can run it using the generalized R2 and the log-likelihoods of simple GLMs as a measure of association.

```{r }
# Measures
trhs_vec <- c("PR2", "LLS")

# Train the GSPCR model with the different values
out_trhs <- lapply(trhs_vec, function(i) {
    # Estimate
    cv_gspcr(
        dv = y,
        ivs = X,
        fam = "gaussian",
        nthrs = 20,
        maxnpcs = 5,
        K = 10,
        fit_measure = "F",
        thrs = i,
        min_features = 1,
        max_features = ncol(X),
        oneSE = TRUE
    )
})

# Plot them
plots <- lapply(out_trhs, function(i) {
    # Estimate
    plot(
        x = i,
        y = "F",
        labels = TRUE,
        errorBars = TRUE,
        discretize = FALSE,
        print = FALSE
    )
})

# Patchwork ggplots
plot_output + plots[[1]] + plots[[2]]

```

# Different cross-validation score statistics

We can run it using different cross-validation score statistics.

```{r }
# Measures
fit_measure_vec <- c("F", "LRT", "AIC", "BIC", "PR2", "MSE")

# Train the GSPCR model with the different values
out_fit_meas <- lapply(fit_measure_vec, function(i) {

    # Estimate
    cv_gspcr(
        dv = y,
        ivs = X,
        fam = "gaussian",
        nthrs = 20,
        maxnpcs = 5,
        K = 10,
        fit_measure = i,
        thrs = "normalized",
        min_features = 1,
        max_features = ncol(X),
        oneSE = TRUE
    )

})

# Plot them
plots <- lapply(seq_along(fit_measure_vec), function(i) {
    # Estimate
    plot(
        x = out_fit_meas[[i]],
        y = fit_measure_vec[[i]],
        labels = TRUE,
        errorBars = TRUE,
        discretize = FALSE,
        print = FALSE
    )
})

# Patchwork ggplots
(plots[[1]] + plots[[2]] + plots[[6]]) / (plots[[5]] + plots[[3]] + plots[[4]])

```

You can also check out the solutions that are returned by each measure:

```{r }

# Default solutions
res <- sapply(
    1:length(out_fit_meas),
    function(meth) {
        c(
            thr_value = out_fit_meas[[meth]]$thr_cv,
            thr_number = which(out_fit_meas[[meth]]$thr_cv == out_fit_meas[[meth]]$thr),
            Q = out_fit_meas[[meth]]$Q_cv
        )
    }
)

# 1se solutions
res_1se <- sapply(
    1:length(out_fit_meas),
    function(meth) {
        c(
            thr_value = out_fit_meas[[meth]]$thr_cv_1se,
            thr_number = which(out_fit_meas[[meth]]$thr_cv_1se == out_fit_meas[[meth]]$thr),
            Q = out_fit_meas[[meth]]$Q_cv_1se
        )
    }
)

# Give meaningful names
colnames(res) <- fit_measure_vec
colnames(res_1se) <- fit_measure_vec

# Print rounded results
round(t(res), 3)
round(t(res_1se), 3)

```

